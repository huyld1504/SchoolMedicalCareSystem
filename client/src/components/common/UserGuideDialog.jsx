import React, { useState } from 'react';
import {
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Button,
    Typography,
    Box,
    Stepper,
    Step,
    StepLabel,
    StepContent,
    Paper,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Fab,
    Tooltip
} from '@mui/material';
import {
    Help,
    PersonAdd,
    RequestPage,
    LocalHospital,
    Assessment,
    CheckCircle,
    NavigateNext,
    NavigateBefore,
    Close
} from '@mui/icons-material';

const UserGuideDialog = ({ open, onClose }) => {
    const [activeStep, setActiveStep] = useState(0);

    const steps = [
        {
            label: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng',
            icon: <Help />,
            content: (
                <Box>
                    <Typography variant="h6" gutterBottom>
                        üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi H·ªá th·ªëng ChƒÉm s√≥c S·ª©c kh·ªèe H·ªçc ƒë∆∞·ªùng!
                    </Typography>
                    <Typography variant="body1" paragraph>
                        ƒê√¢y l√† h∆∞·ªõng d·∫´n nhanh gi√∫p b·∫°n s·ª≠ d·ª•ng h·ªá th·ªëng m·ªôt c√°ch d·ªÖ d√†ng v√† hi·ªáu qu·∫£.
                    </Typography>

                </Box>
            )
        },
        {
            label: 'Th√™m th√¥ng tin con em',
            icon: <PersonAdd />,
            content: (
                <Box>
                    <Typography variant="h6" gutterBottom>
                        üë∂ B∆∞·ªõc 1: Th√™m th√¥ng tin con em
                    </Typography>
                    <List dense>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Nh·∫•n n√∫t 'Th√™m Con Em M·ªõi'"
                                secondary="N√∫t m√†u xanh d∆∞∆°ng l·ªõn ·ªü ƒë·∫ßu trang"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="ƒêi·ªÅn th√¥ng tin c∆° b·∫£n"
                                secondary="H·ªç t√™n, ng√†y sinh, gi·ªõi t√≠nh, m√£ h·ªçc sinh"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="ƒêi·ªÅn th√¥ng tin y t·∫ø"
                                secondary="Chi·ªÅu cao, c√¢n n·∫∑ng, nh√≥m m√°u, d·ªã ·ª©ng (n·∫øu c√≥)"
                            />
                        </ListItem>
                    </List>
                </Box>
            )
        },
        {
            label: 'Xem th√¥ng tin s·ª©c kh·ªèe',
            icon: <LocalHospital />,
            content: (
                <Box>
                    <Typography variant="h6" gutterBottom>
                        üè• B∆∞·ªõc 2: Theo d√µi s·ª©c kh·ªèe con em
                    </Typography>
                    <List dense>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Nh·∫•n 'Xem S·ª©c Kh·ªèe'"
                                secondary="N√∫t m√†u xanh l√° c√¢y tr√™n th·∫ª con em"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Xem h·ªì s∆° y t·∫ø"
                                secondary="Chi·ªÅu cao, c√¢n n·∫∑ng, nh√≥m m√°u, th·ªã l·ª±c"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Ki·ªÉm tra c·∫£nh b√°o"
                                secondary="D·ªã ·ª©ng, b·ªánh m√£n t√≠nh, thi·∫øt b·ªã h·ªó tr·ª£"
                            />
                        </ListItem>
                    </List>
                </Box>
            )
        },
        {
            label: 'Y√™u c·∫ßu ƒë∆°n thu·ªëc',
            icon: <RequestPage />,
            content: (
                <Box>
                    <Typography variant="h6" gutterBottom>
                        üíä B∆∞·ªõc 3: Y√™u c·∫ßu ƒë∆°n thu·ªëc cho con
                    </Typography>
                    <List dense>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Nh·∫•n 'Y√™u C·∫ßu ƒê∆°n Thu·ªëc'"
                                secondary="N√∫t m√†u cam tr√™n th·∫ª con em"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c"
                                secondary="Th·ªùi gian c·∫ßn u·ªëng thu·ªëc"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Th√™m danh s√°ch thu·ªëc"
                                secondary="T√™n thu·ªëc, s·ªë l∆∞·ª£ng, ƒë∆°n v·ªã, ghi ch√∫"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Ch·ªù y t√° duy·ªát"
                                secondary="S·∫Ω c√≥ th√¥ng b√°o khi ƒë∆°n ƒë∆∞·ª£c duy·ªát"
                            />
                        </ListItem>
                    </List>
                </Box>
            )
        },
        {
            label: 'M·∫πo s·ª≠ d·ª•ng hi·ªáu qu·∫£',
            icon: <Assessment />,
            content: (
                <Box>
                    <Typography variant="h6" gutterBottom>
                        üí° M·∫πo s·ª≠ d·ª•ng h·ªá th·ªëng hi·ªáu qu·∫£
                    </Typography>
                    <List dense>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Ki·ªÉm tra th√¥ng b√°o th∆∞·ªùng xuy√™n"
                                secondary="·ªû ƒë·∫ßu trang ch√≠nh c√≥ c√°c th√¥ng b√°o quan tr·ªçng"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="C·∫≠p nh·∫≠t th√¥ng tin k·ªãp th·ªùi"
                                secondary="Th√¥ng b√°o cho tr∆∞·ªùng khi c√≥ thay ƒë·ªïi s·ª©c kh·ªèe"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="Li√™n h·ªá h·ªó tr·ª£ khi c·∫ßn"
                                secondary="G·ªçi ƒëi·ªán ho·∫∑c ƒë·∫øn tr∆∞·ªùng khi c√≥ th·∫Øc m·∫Øc"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemIcon>
                                <CheckCircle color="success" />
                            </ListItemIcon>
                            <ListItemText
                                primary="S·ª≠ d·ª•ng n√∫t l√†m m·ªõi"
                                secondary="Nh·∫•n n√∫t tr√≤n ·ªü g√≥c ph·∫£i ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu"
                            />
                        </ListItem>
                    </List>
                </Box>
            )
        }
    ];

    const handleNext = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleClose = () => {
        setActiveStep(0);
        onClose();
    };

    return (
        <Dialog
            open={open}
            onClose={handleClose}
            maxWidth="md"
            fullWidth
            PaperProps={{
                sx: {
                    borderRadius: 3,
                    minHeight: '600px'
                }
            }}
        >
            <DialogTitle sx={{
                textAlign: 'center',
                pb: 2,
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                color: 'white'
            }}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>
                    <Help sx={{ mr: 2, fontSize: 32 }} />
                    <Typography variant="h4" fontWeight="bold">
                        H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
                    </Typography>
                </Box>
                <Typography variant="h6" sx={{ opacity: 0.9 }}>
                    H·ªçc c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng m·ªôt c√°ch d·ªÖ d√†ng
                </Typography>
            </DialogTitle>

            <DialogContent sx={{ p: 4 }}>
                <Stepper activeStep={activeStep} orientation="vertical">
                    {steps.map((step, index) => (
                        <Step key={step.label}>
                            <StepLabel
                                icon={step.icon}
                                sx={{
                                    '& .MuiStepLabel-iconContainer': {
                                        '& .MuiSvgIcon-root': {
                                            fontSize: '2rem',
                                            color: index <= activeStep ? '#4caf50' : '#ccc'
                                        }
                                    }
                                }}
                            >
                                <Typography variant="h6" fontWeight="bold">
                                    {step.label}
                                </Typography>
                            </StepLabel>
                            <StepContent>
                                <Paper elevation={0} sx={{ p: 3, backgroundColor: '#f8f9fa', borderRadius: 2 }}>
                                    {step.content}
                                </Paper>
                            </StepContent>
                        </Step>
                    ))}
                </Stepper>
            </DialogContent>

            <DialogActions sx={{ justifyContent: 'space-between', p: 3 }}>
                <Button
                    disabled={activeStep === 0}
                    onClick={handleBack}
                    startIcon={<NavigateBefore />}
                    size="large"
                    sx={{ fontSize: '1.1rem' }}
                >
                    Quay l·∫°i
                </Button>

                <Typography variant="body1" color="text.secondary">
                    {activeStep + 1} / {steps.length}
                </Typography>

                {activeStep === steps.length - 1 ? (
                    <Button
                        onClick={handleClose}
                        variant="contained"
                        startIcon={<CheckCircle />}
                        size="large"
                        sx={{
                            fontSize: '1.1rem',
                            backgroundColor: '#4caf50',
                            '&:hover': { backgroundColor: '#45a049' }
                        }}
                    >
                        Ho√†n th√†nh
                    </Button>
                ) : (
                    <Button
                        onClick={handleNext}
                        variant="contained"
                        endIcon={<NavigateNext />}
                        size="large"
                        sx={{ fontSize: '1.1rem' }}
                    >
                        Ti·∫øp theo
                    </Button>
                )}
            </DialogActions>
        </Dialog>
    );
};

// Component n√∫t tr·ª£ gi√∫p n·ªïi
export const HelpButton = () => {
    const [guideOpen, setGuideOpen] = useState(false);

    return (
        <>
            <Tooltip title="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng" placement="left">
                <Fab
                    color="secondary"
                    onClick={() => setGuideOpen(true)}
                    sx={{
                        position: 'fixed',
                        bottom: 24,
                        right: 24,
                        zIndex: 1000,
                        background: 'linear-gradient(45deg, #ff9800 30%, #f57c00 90%)',
                        '&:hover': {
                            background: 'linear-gradient(45deg, #f57c00 30%, #ef6c00 90%)',
                        }
                    }}
                >
                    <Help sx={{ fontSize: 28 }} />
                </Fab>
            </Tooltip>

            <UserGuideDialog
                open={guideOpen}
                onClose={() => setGuideOpen(false)}
            />
        </>
    );
};

export default UserGuideDialog;
