import React, { useState, useEffect, useCallback } from 'react';
import {
    Box,
    Container,
    Typography,
    Card,
    CardContent,
    TextField,
    Button,
    Grid,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    CircularProgress,
    Alert,
    IconButton,
    Tooltip,
    Avatar,
    Divider,
} from '@mui/material';
import {
    Save as SaveIcon,
    ArrowBack as BackIcon,
    Refresh as RefreshIcon,
    Person as PersonIcon,
} from '@mui/icons-material';
import { useFormik } from 'formik';
import * as yup from 'yup';
import { useSelector } from 'react-redux';
import { useParams, useNavigate } from 'react-router';
import { toast } from 'react-toastify';
import studentsApi from '../../api/studentsApi';
import healthProfileAPI from '../../api/healthProfileApi';

// --- Constants and Helper Functions ---
const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];

const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('vi-VN');
};

// Validation schema
const validationSchema = yup.object({
    height: yup
        .number('Chi·ªÅu cao ph·∫£i l√† s·ªë')
        .positive('Chi·ªÅu cao ph·∫£i l·ªõn h∆°n 0')
        .min(50, 'Chi·ªÅu cao t·ªëi thi·ªÉu 50cm')
        .max(300, 'Chi·ªÅu cao kh√¥ng h·ª£p l·ªá')
        .nullable()
        .required('Chi·ªÅu cao l√† b·∫Øt bu·ªôc'),
    weight: yup
        .number('C√¢n n·∫∑ng ph·∫£i l√† s·ªë')
        .positive('C√¢n n·∫∑ng ph·∫£i l·ªõn h∆°n 0')
        .min(10, 'C√¢n n·∫∑ng t·ªëi thi·ªÉu 10kg')
        .max(500, 'C√¢n n·∫∑ng kh√¥ng h·ª£p l·ªá')
        .nullable()
        .required('C√¢n n·∫∑ng l√† b·∫Øt bu·ªôc'),
        
    bloodType: yup
        .string('Nh√≥m m√°u ph·∫£i l√† chu·ªói')
        .oneOf(['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'], 'Nh√≥m m√°u kh√¥ng h·ª£p l·ªá')
        .nullable()
        .required('Nh√≥m m√°u l√† b·∫Øt bu·ªôc'),
    vision: yup
        .string('Th·ªã l·ª±c ph·∫£i l√† chu·ªói')
        .max(100, 'Th√¥ng tin th·ªã l·ª±c qu√° d√†i')
        .nullable()
        .required('Th√¥ng tin th·ªã l·ª±c l√† b·∫Øt bu·ªôc'),
    allergies: yup
        .string('D·ªã ·ª©ng ph·∫£i l√† chu·ªói')
        .max(1000, 'Th√¥ng tin d·ªã ·ª©ng qu√° d√†i')
        .nullable(),
    chronicDiseases: yup
        .string('B·ªánh m√£n t√≠nh ph·∫£i l√† chu·ªói')
        .max(1000, 'Th√¥ng tin b·ªánh m√£n t√≠nh qu√° d√†i')
        .nullable(),
    devicesSupport: yup
        .string('Thi·∫øt b·ªã h·ªó tr·ª£ ph·∫£i l√† chu·ªói')
        .max(500, 'Th√¥ng tin thi·∫øt b·ªã h·ªó tr·ª£ qu√° d√†i')
        .nullable(),
});

// --- Inline UI Components ---
const StudentInfoSidebar = ({ student }) => {
    if (!student) return null;

    const genderText = student.gender === 'male' ? 'Nam' : student.gender === 'female' ? 'N·ªØ' : 'N/A';

    return (
        <Card variant="outlined" sx={{ position: 'sticky', top: 24, width: '300px', height: '100%' }}>
            <CardContent>
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 3 }}>
                    <Avatar sx={{ width: 80, height: 80, mb: 2, bgcolor: 'primary.main', fontSize: '2.5rem' }}>
                        {student.name?.charAt(0)?.toUpperCase()}
                    </Avatar>
                    <Typography variant="h6" component="div" sx={{ fontWeight: 600, textAlign: 'center' }}>
                        {student.name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                        M√£ HS: {student.studentCode}
                    </Typography>
                </Box>
                <Grid container spacing={2}>
                    <Grid item xs={12}>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                            Ng√†y sinh
                        </Typography>
                        <Typography variant="body1" sx={{ mt: 0.5 }}>
                            {formatDate(student.birthdate)}
                        </Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                            Gi·ªõi t√≠nh
                        </Typography>
                        <Typography variant="body1" sx={{ mt: 0.5 }}>
                            {genderText}
                        </Typography>
                    </Grid>
                    <Grid item xs={12}>
                        <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600 }}>
                            M√£ b·∫£o hi·ªÉm y t·∫ø
                        </Typography>
                        <Typography variant="body1" sx={{ mt: 0.5 }}>
                            {student.medicalConverageId}
                        </Typography>
                    </Grid>
                </Grid>
            </CardContent>
        </Card>
    );
};

const SectionHeader = ({ icon, title }) => (
    <>
        <Box sx={{ display: 'flex', alignItems: 'center', my: 2 }}>
            <Typography variant="h6" sx={{ fontWeight: 600, color: 'text.primary' }}>
                {icon} {title}
            </Typography>
        </Box>
        <Divider sx={{ mb: 3 }} />
    </>
);

const HealthProfileForm = ({ formik, saving, onCancel }) => {
    return (
        <form onSubmit={formik.handleSubmit}>
            <Card variant="outlined">
                <CardContent sx={{ p: { xs: 2, md: 3 } }}>
                    <Typography variant="h5" sx={{ fontWeight: 700, mb: 3, color: 'primary.main' }}>
                        Th√¥ng tin H·ªì s∆° Y t·∫ø
                    </Typography>

                    <SectionHeader icon="üìè" title="Th√¥ng s·ªë c∆° th·ªÉ" />
                    <Grid container spacing={3}>
                        <Grid item xs={12} sm={6}>
                            <TextField
                                fullWidth
                                id="height"
                                name="height"
                                label="Chi·ªÅu cao (cm)"
                                type="number"
                                {...formik.getFieldProps('height')}
                                error={formik.touched.height && Boolean(formik.errors.height)}
                                helperText={formik.touched.height && formik.errors.height}
                            />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                            <TextField
                                fullWidth
                                id="weight"
                                name="weight"
                                label="C√¢n n·∫∑ng (kg)"
                                type="number"
                                {...formik.getFieldProps('weight')}
                                error={formik.touched.weight && Boolean(formik.errors.weight)}
                                helperText={formik.touched.weight && formik.errors.weight}
                            />
                        </Grid>
                        <Grid item xs={12} sm={6}>
                            <FormControl fullWidth error={formik.touched.bloodType && Boolean(formik.errors.bloodType)}>
                                <InputLabel>Nh√≥m m√°u</InputLabel>
                                <Select
                                    label="Nh√≥m m√°u"
                                    name="bloodType"
                                    {...formik.getFieldProps('bloodType')}
                                >
                                    <MenuItem value=""><em>Kh√¥ng r√µ</em></MenuItem>
                                    {bloodTypes.map((type) => (
                                        <MenuItem key={type} value={type}>{type}</MenuItem>
                                    ))}
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6}>
                            <TextField
                                fullWidth
                                id="vision"
                                name="vision"
                                label="T√¨nh tr·∫°ng th·ªã l·ª±c"
                                {...formik.getFieldProps('vision')}
                                error={formik.touched.vision && Boolean(formik.errors.vision)}
                                helperText={formik.touched.vision && formik.errors.vision}
                                placeholder="VD: M·∫Øt ph·∫£i 10/10, M·∫Øt tr√°i c·∫≠n 1.5 ƒë·ªô"
                            />
                        </Grid>
                    </Grid>

                    <SectionHeader icon="üè•" title="Ti·ªÅn s·ª≠ b·ªánh & D·ªã ·ª©ng" />
                    <Grid container spacing={3}>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                id="chronicDiseases"
                                name="chronicDiseases"
                                label="B·ªánh m√£n t√≠nh ho·∫∑c l∆∞u √Ω ƒë·∫∑c bi·ªát"
                                multiline
                                rows={4}
                                {...formik.getFieldProps('chronicDiseases')}
                                error={formik.touched.chronicDiseases && Boolean(formik.errors.chronicDiseases)}
                                helperText={formik.touched.chronicDiseases && formik.errors.chronicDiseases}
                                placeholder="Ghi r√µ c√°c b·ªánh nh∆∞: hen suy·ªÖn, tim m·∫°ch, ƒë·ªông kinh... N·∫øu kh√¥ng c√≥, ghi 'Kh√¥ng'."
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                id="allergies"
                                name="allergies"
                                label="D·ªã ·ª©ng (thu·ªëc, th·ª±c ph·∫©m, ...)"
                                multiline
                                rows={4}
                                {...formik.getFieldProps('allergies')}
                                error={formik.touched.allergies && Boolean(formik.errors.allergies)}
                                helperText={formik.touched.allergies && formik.errors.allergies}
                                placeholder="Ghi r√µ lo·∫°i d·ªã ·ª©ng v√† bi·ªÉu hi·ªán. VD: D·ªã ·ª©ng Penicillin (g√¢y m·∫©n ng·ª©a), d·ªã ·ª©ng h·∫£i s·∫£n (g√¢y kh√≥ th·ªü)... N·∫øu kh√¥ng c√≥, ghi 'Kh√¥ng'."
                            />
                        </Grid>
                        <Grid item xs={12}>
                            <TextField
                                fullWidth
                                id="devicesSupport"
                                name="devicesSupport"
                                multiline
                                rows={4}
                                label="Thi·∫øt b·ªã h·ªó tr·ª£ (n·∫øu c√≥)"
                                {...formik.getFieldProps('devicesSupport')}
                                error={formik.touched.devicesSupport && Boolean(formik.errors.devicesSupport)}
                                helperText={formik.touched.devicesSupport && formik.errors.devicesSupport}
                                placeholder="VD: K√≠nh c·∫≠n, m√°y tr·ª£ th√≠nh..."
                            />
                        </Grid>
                    </Grid>
                </CardContent>
                <Divider />
                <CardContent>
                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                        <Button variant="text" onClick={onCancel} disabled={saving}>
                            H·ªßy b·ªè
                        </Button>
                        <Button
                            type="submit"
                            variant="contained"
                            startIcon={saving ? <CircularProgress size={20} color="inherit" /> : <SaveIcon />}
                            disabled={saving || !formik.isValid}
                        >
                            {saving ? 'ƒêang t·∫°o...' : 'T·∫°o h·ªì s∆° m·ªõi'}
                        </Button>
                    </Box>
                </CardContent>
            </Card>
        </form>
    );
};

// --- Main Page Component ---
const AddHealthProfilePage = () => {
    const { studentId } = useParams();
    const navigate = useNavigate();
    const { user } = useSelector((state) => state.auth);

    const [healthProfile, setHealthProfile] = useState(null);
    const [studentInfo, setStudentInfo] = useState(null);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);

    const loadData = useCallback(async () => {
        try {
            setLoading(true);

            if (studentId) {
                const response = await healthProfileAPI.getByChildId(studentId, {});
                console.log('Health profile response:', response);

                if (response.isSuccess && response.data.records && response.data.records.length > 0) {
                    const latestProfile = response.data.records.sort((a, b) =>
                        new Date(b.createdAt) - new Date(a.createdAt)
                    )[0];

                    setHealthProfile(latestProfile);

                    if (latestProfile.studentId) {
                        setStudentInfo(latestProfile.studentId);
                    }

                    console.log('Latest health profile:', latestProfile);

                    formik.setValues({
                        height: latestProfile.height || '',
                        weight: latestProfile.weight || '',
                        bloodType: latestProfile.bloodType || '',
                        vision: latestProfile.vision || '',
                        allergies: latestProfile.allergies || '',
                        chronicDiseases: latestProfile.chronicDiseases || '',
                        devicesSupport: latestProfile.devicesSupport || '',
                    });
                }
            }
        } catch (error) {
            console.error('Error loading data:', error);
            toast.error('L·ªói khi t·∫£i th√¥ng tin');
        } finally {
            setLoading(false);
        }
    }, [studentId]);

    useEffect(() => {
        loadData();
    }, [loadData]);

    const formik = useFormik({
        initialValues: {
            height: '',
            weight: '',
            bloodType: '',
            vision: '',
            allergies: '',
            chronicDiseases: '',
            devicesSupport: '',
        },
        validationSchema: validationSchema,
        onSubmit: async (values) => {
            try {
                setSaving(true);

                const profileData = {
                    ...values,
                    studentId: studentId
                };

                const response = await healthProfileAPI.create(profileData);

                if (response.isSuccess) {
                    toast.success('T·∫°o h·ªì s∆° y t·∫ø m·ªõi th√†nh c√¥ng');
                    navigate(`/nurse/health-profiles/${studentId}`);
                } else {
                    toast.error(response.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o h·ªì s∆° m·ªõi');
                }
            } catch (error) {
                console.error('Error creating health profile:', error);
                toast.error('L·ªói khi t·∫°o h·ªì s∆° y t·∫ø m·ªõi');
            } finally {
                setSaving(false);
            }
        },
    });

    const handleBack = () => {
        navigate(`/nurse/health-profiles/${studentId}`);
    };

    const handleRefresh = () => {
        loadData();
        toast.success('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu');
    };

    // --- Render Logic ---
    if (loading) {
        return (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Container maxWidth="xl" sx={{ py: 3 }}>
            {/* Header */}
            <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <IconButton onClick={handleBack} aria-label="Quay l·∫°i">
                        <BackIcon />
                    </IconButton>
                    <Typography variant="h4" component="h1" sx={{ fontWeight: 700 }}>
                        T·∫°o h·ªì s∆° Y t·∫ø m·ªõi
                    </Typography>
                </Box>
                <Tooltip title="L√†m m·ªõi d·ªØ li·ªáu">
                    <span>
                        <IconButton onClick={handleRefresh} color="primary" disabled={loading || saving}>
                            <RefreshIcon />
                        </IconButton>
                    </span>
                </Tooltip>
            </Box>

            {/* Main Content */}
            {!studentInfo ? (
                <Alert severity="error" sx={{ m: 2 }}>
                    Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªçc sinh. Vui l√≤ng quay l·∫°i trang danh s√°ch v√† th·ª≠ l·∫°i.
                </Alert>
            ) : (
                <Grid container spacing={{ xs: 2, md: 4 }}>
                    <Grid item xs={12} md={4}>
                        <StudentInfoSidebar student={studentInfo} />
                    </Grid>
                    <Grid item xs={12} md={8}>
                        <HealthProfileForm formik={formik} saving={saving} onCancel={handleBack} />
                    </Grid>
                </Grid>
            )}
        </Container>
    );
};

export default AddHealthProfilePage;
