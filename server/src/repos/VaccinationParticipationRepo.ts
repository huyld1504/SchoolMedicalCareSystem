import { refreshToken } from './../common/libs/lib.jwt';
import { BaseRepository } from "@src/common/base/base.repository";
import { FilterOptions, PaginationOptions, PaginationResult, SortOptions } from "@src/common/interfaces/mongo.interface";
import { ApplicationError } from "@src/common/util/util.route-errors";
import { VaccinationParticipation, IVaccinationParticipation } from "@src/models/VaccinationParticipation";
import { VaccinationParticipationQueryBuilder } from "@src/payload/request/filter/vaccination.request";
import { Types } from "mongoose";

export class VaccinationParticipationRepository extends BaseRepository<IVaccinationParticipation> {
  constructor() {
    super(VaccinationParticipation);
  }

  /**
   * Add students to campaign (bulk insert)
   * Ch·ª©c nƒÉng: Th√™m h·ªçc sinh v√†o chi·∫øn d·ªãch ti√™m ch·ªßng
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng bulk insert ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng truy v·∫•n
   * @param campaignId - ID c·ªßa chi·∫øn d·ªãch
   * @param studentIds - M·∫£ng ID c·ªßa h·ªçc sinh
   * @param adminId - ID c·ªßa admin th·ª±c hi·ªán thao t√°c
   * @return Promise<void>
   * @throws Error n·∫øu c√≥ l·ªói trong qu√° tr√¨nh th√™m h·ªçc sinh
   */
  async addStudentsToCampaign(
    campaignId: string,
    studentIds: string[],
    adminId: string
  ): Promise<void> {
    const participations = studentIds.map(studentId => ({
      campaign: new Types.ObjectId(campaignId),
      student: new Types.ObjectId(studentId),
      parentConsent: "pending",
      vaccinationStatus: "scheduled",
      createdBy: new Types.ObjectId(adminId)
    }));

    await VaccinationParticipation.insertMany(participations);
  }

  /**
   * Get participations by campaign
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch tham gia ti√™m ch·ªßng theo chi·∫øn d·ªãch
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes cho tr∆∞·ªùng campaign v√† vaccinationStatus
   * @param campaignId - ID c·ªßa chi·∫øn d·ªãch
   * @param options - T√πy ch·ªçn ph√¢n trang bao g·ªìm page v√† limit
   * @param sort - T√πy ch·ªçn s·∫Øp x·∫øp (n·∫øu c·∫ßn)
   * @return Promise<PaginationResult<IVaccinationParticipation>>
   * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ho·∫∑c c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n
   */
  async getParticipationsByCampaign(
    campaignId: string,
    options: PaginationOptions,
    sort?: SortOptions
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    const filter: FilterOptions<IVaccinationParticipation> = {
      campaign: new Types.ObjectId(campaignId)
    };

    return this.paginate(filter, options, sort);
  }

  /**
   * Get participations by parent (for parent to see their children)
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch tham gia ti√™m ch·ªßng c·ªßa h·ªçc sinh thu·ªôc v·ªÅ ph·ª• huynh
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng populate ƒë·ªÉ l·∫•y th√¥ng tin h·ªçc sinh v√† chi·∫øn d·ªãch
   * - S·ª≠ d·ª•ng pagination ƒë·ªÉ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
   * @param parentId - ID c·ªßa ph·ª• huynh
   * @param options - T√πy ch·ªçn ph√¢n trang bao g·ªìm page v√† limit
   * @return Promise<PaginationResult<IVaccinationParticipation>>
   * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y ph·ª• huynh ho·∫∑c c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n
   */
  async getParticipationsByParent(
    parentId: string,
    options: PaginationOptions,
    sort?: SortOptions
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    // Join v·ªõi Child ƒë·ªÉ l·∫•y children c·ªßa parent
    const [records, total] = await Promise.all([
      VaccinationParticipation.find()
        .populate({
          path: 'student',
          match: { userId: new Types.ObjectId(parentId) }
        })
        .populate('campaign')
        .skip((options.page - 1) * options.limit)
        .limit(options.limit)
        .sort(sort || { createdAt: -1 })
        .exec()
        .then(results => results.filter(r => r.student)), // L·ªçc nh·ªØng record c√≥ student match

      VaccinationParticipation.countDocuments({})
        .populate({
          path: 'student',
          match: { userId: new Types.ObjectId(parentId) }
        })
    ]);

    return {
      records,
      total,
      page: options.page,
      limit: options.limit,
      totalPages: Math.ceil(total / options.limit)
    };
  }
  /**
   * Update parent consent with validation
   * Ch·ª©c nƒÉng: C·∫≠p nh·∫≠t ƒë·ªìng √Ω c·ªßa ph·ª• huynh cho h·ªçc sinh
   * Business Rules:
   * - N·∫øu ph·ª• huynh T·ª™CH·ªêI (denied): B·∫ÆT BU·ªòC ph·∫£i c√≥ l√Ω do trong parentNote
   * - N·∫øu ph·ª• huynh ƒê·ªíNG √ù (approved): parentNote l√† t√πy ch·ªçn
   * 
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes cho tr∆∞·ªùng parentConsent v√† vaccinationStatus
   * @param participationId - ID c·ªßa tham gia
   * @param parentId - ID c·ªßa ph·ª• huynh
   * @param consent - Tr·∫°ng th√°i ƒë·ªìng √Ω (approved, denied)
   * @param note - Ghi ch√∫ t·ª´ ph·ª• huynh (B·∫ÆT BU·ªòC n·∫øu consent = 'denied')
   * @return Promise<IVaccinationParticipation | null>
   * @throws Error n·∫øu participation kh√¥ng t·ªìn t·∫°i, ph·ª• huynh kh√¥ng c√≥ quy·ªÅn, ho·∫∑c thi·∫øu l√Ω do t·ª´ ch·ªëi
   */
  async updateParentConsent(
    participationId: string,
    parentId: string,
    consent: 'approved' | 'denied',
    note?: string
  ): Promise<IVaccinationParticipation | null> {
    // üö® BUSINESS RULE VALIDATION
    if (consent === 'denied' && (!note || note.trim().length === 0)) {
      throw new ApplicationError("L√Ω do t·ª´ ch·ªëi l√† b·∫Øt bu·ªôc khi ph·ª• huynh kh√¥ng ƒë·ªìng √Ω ti√™m ch·ªßng");
    }

    // Ki·ªÉm tra quy·ªÅn: ch·ªâ parent c·ªßa student m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    const participation = await VaccinationParticipation.findById(participationId)
      .populate('student')
      .exec();

    if (!participation) {
      throw new ApplicationError("Kh√¥ng t√¨m th·∫•y th√¥ng tin tham gia ti√™m ch·ªßng");
    }

    if ((participation.student as any).userId.toString() !== parentId) {
      throw new ApplicationError("B·∫°n ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t ƒë·ªìng √Ω cho con em c·ªßa m√¨nh");
    }

    // Prepare update data
    const updateData: Partial<IVaccinationParticipation> = {
      parentConsent: consent,
      parentConsentDate: new Date(),
      vaccinationStatus: consent === 'denied' ? 'cancelled' : 'scheduled'
    };

    // Add parent note if provided (required for denied, optional for approved)
    if (note && note.trim().length > 0) {
      updateData.parentNote = note.trim();
    }

    return this.update(participationId, updateData);
  }  /**
   * Record vaccination (nurse function) with enhanced validation
   * Ch·ª©c nƒÉng: Ghi nh·∫≠n k·∫øt qu·∫£ ti√™m ch·ªßng c·ªßa h·ªçc sinh   * Business Rules:
   * - nurseNote l√† T√ôY CH·ªåN cho t·∫•t c·∫£ tr∆∞·ªùng h·ª£p (completed, missed, cancelled)
   * - N·∫øu c√≥ nurseNote th√¨ ph·∫£i c√≥ n·ªôi dung c√≥ nghƒ©a (kh√¥ng ƒë∆∞·ª£c ch·ªâ space)
   * - Status 'completed' y√™u c·∫ßu vaccinationDate t·ª´ y t√° v√† vaccinatedNurse
   * 
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes cho tr∆∞·ªùng vaccinationStatus v√† vaccinatedNurse
   * @param participationId - ID c·ªßa tham gia
   * @param nurseId - ID c·ªßa y t√° th·ª±c hi·ªán ti√™m
   * @param status - Tr·∫°ng th√°i ti√™m ch·ªßng (completed, missed, cancelled)
   * @param vaccinationDate - Ng√†y ti√™m do y t√° nh·∫≠p (b·∫Øt bu·ªôc khi status = completed)
   * @param note - Ghi ch√∫ t·ª´ y t√° (T√ôY CH·ªåN - c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)
   * @return Promise<IVaccinationParticipation | null>
   * @throws Error n·∫øu participation kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c ti√™m ch·ªßng  
   */  async recordVaccination(
    participationId: string,
    nurseId: string,
    status: 'completed' | 'missed' | 'cancelled',
    vaccinationDate?: Date,
    note?: string
  ): Promise<IVaccinationParticipation | null> {
    // Prepare base update data
    const updateData: Partial<IVaccinationParticipation> = {
      vaccinationStatus: status,
    };    // Add nurse note only if provided and has meaningful content
    if (note && note.trim().length > 0) {
      updateData.nurseNote = note.trim();
    }

    // For completed vaccination, use provided date and record nurse
    if (status === 'completed') {
      if (!vaccinationDate) {
        throw new Error('Vaccination date is required when status is completed');
      }
      updateData.vaccinationDate = vaccinationDate; // S·ª≠ d·ª•ng ng√†y do y t√° nh·∫≠p
      updateData.vaccinatedNurse = new Types.ObjectId(nurseId); // L∆∞u ID y t√° th·ª±c hi·ªán
    }

    return this.update(participationId, updateData);
  }

  /**
   * Get students with pending consent for a campaign
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch h·ªçc sinh c√≥ consent t·ª´ ph·ª• huynh ƒëang ch·ªù x·ª≠ l√Ω
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes cho tr∆∞·ªùng parentConsent  
   * * @param campaignId - ID c·ªßa chi·∫øn d·ªãch
   * @param options - T√πy ch·ªçn ph√¢n trang bao g·ªìm page v√† limit
   * @return Promise<PaginationResult<IVaccinationParticipation>> 
   * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ho·∫∑c c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n
   */
  async getStudentsWithPendingConsent(
    campaignId: string,
    options: PaginationOptions
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    const filter: FilterOptions<IVaccinationParticipation> = {
      campaign: new Types.ObjectId(campaignId),
      parentConsent: "pending"
    };

    return this.paginate(filter, options);
  }

  /**
   * Get approved students ready for vaccination
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch h·ªçc sinh ƒë√£ ƒë∆∞·ª£c ph·ª• huynh ƒë·ªìng √Ω ti√™m ch·ªßng
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes cho c√°c tr∆∞·ªùng parentConsent v√† vaccinationStatus
   * - S·ª≠ d·ª•ng pagination ƒë·ªÉ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
   * @param campaignId - ID c·ªßa chi·∫øn d·ªãch  
   * @param options - T√πy ch·ªçn ph√¢n trang bao g·ªìm page v√† limit
   * @return Promise<PaginationResult<IVaccinationParticipation>>
   * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ho·∫∑c c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n
   */
  async getApprovedStudentsForVaccination(
    campaignId: string,
    options: PaginationOptions
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    const filter: FilterOptions<IVaccinationParticipation> = {
      campaign: new Types.ObjectId(campaignId),
      parentConsent: "approved",
      vaccinationStatus: "scheduled"
    };

    return this.paginate(filter, options);
  }

  /**
   * Get participations by campaign with filters
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch tham gia theo chi·∫øn d·ªãch v·ªõi c√°c b·ªô l·ªçc
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes cho c√°c tr∆∞·ªùng parentConsent v√† vaccinationStatus
   * - S·ª≠ d·ª•ng pagination ƒë·ªÉ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
   * @param campaignId - ID c·ªßa chi·∫øn d·ªãch
   * @param filters - B·ªô l·ªçc bao g·ªìm parentConsent v√† vaccinationStatus
   * @param options - T√πy ch·ªçn ph√¢n trang bao g·ªìm page v√† limit
   * @param sort - T√πy ch·ªçn s·∫Øp x·∫øp (n·∫øu c·∫ßn) 
   * @return Promise<PaginationResult<IVaccinationParticipation>>
    * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ho·∫∑c c√≥ l·ªói trong qu√° tr√¨nh truy v·∫•n
   */
  async getParticipationsByCampaignWithFilters(
    campaignId: string,
    filters: { parentConsent?: string; vaccinationStatus?: string; },
    options: PaginationOptions,
    sort?: SortOptions
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    const filter: FilterOptions<IVaccinationParticipation> = {
      campaign: new Types.ObjectId(campaignId)
    };

    if (filters.parentConsent) {
      filter.parentConsent = filters.parentConsent as any;
    }
    if (filters.vaccinationStatus) {
      filter.vaccinationStatus = filters.vaccinationStatus as any;
    }

    const [records, total] = await Promise.all([
      VaccinationParticipation.find(filter)
        .populate('campaign', 'vaccineName vaccineType startDate status') // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        .populate('student', 'name studentCode') // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        .populate('createdBy', 'name email') // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        .populate('vaccinatedNurse', 'name email') // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        .skip((options.page - 1) * options.limit)
        .limit(options.limit || 10)
        .sort(sort || { createdAt: -1 })
        .exec(),
      VaccinationParticipation.countDocuments(filter).exec(),
    ]);

    return {
      records,
      total,
      page: options.page,
      limit: options.limit,
      totalPages: Math.ceil(total / options.limit)
    };
  }

  /**
   * Get participations by parent with filters
   */
  async getParticipationsByParentWithFilters(
    parentId: string,
    filters: { parentConsent?: string; vaccinationStatus?: string; },
    options: PaginationOptions,
    sort?: SortOptions
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    // Build aggregation pipeline
    const matchStage: any = {};

    if (filters.parentConsent) {
      matchStage.parentConsent = filters.parentConsent;
    }
    if (filters.vaccinationStatus) {
      matchStage.vaccinationStatus = filters.vaccinationStatus;
    }

    const pipeline = [
      {
        $lookup: {
          from: 'children',
          localField: 'student',
          foreignField: '_id',
          as: 'studentInfo'
        }
      },
      {
        $match: {
          'studentInfo.userId': new Types.ObjectId(parentId),
          ...matchStage
        }
      },
      {
        $lookup: {
          from: 'vaccinationcampaigns',
          localField: 'campaign',
          foreignField: '_id',
          as: 'campaignInfo'
        }
      }
    ];

    const [records, totalResult] = await Promise.all([
      VaccinationParticipation.aggregate([
        ...pipeline,
        { $skip: (options.page - 1) * options.limit },
        { $limit: options.limit },
        { $sort: sort || { createdAt: -1 } }
      ]).exec(),

      VaccinationParticipation.aggregate([
        ...pipeline,
        { $count: "total" }
      ]).exec()
    ]);

    const total = totalResult[0]?.total || 0;

    return {
      records,
      total,
      page: options.page,
      limit: options.limit,
      totalPages: Math.ceil(total / options.limit)
    };
  }

  // ============================================================================
  //                        SEARCH METHODS - OPTIMIZED WITH INDEXES
  // ============================================================================

  /**
   * üîç MAIN SEARCH METHOD - Smart Query Routing
   * 
   * Ch·ª©c nƒÉng: Entry point cho t·∫•t c·∫£ search operations
   * T·ªëi ∆∞u h√≥a: Ch·ªçn strategy ph√π h·ª£p d·ª±a tr√™n presence c·ªßa keyword
   * 
   * Logic:
   * - C√≥ keyword ‚Üí D√πng Aggregation Pipeline (search multi-fields)
   * - Kh√¥ng keyword ‚Üí D√πng Simple Filter Query (performance cao h∆°n)
   * 
   * @param queryBuilder - Object ch·ª©a t·∫•t c·∫£ query parameters
   * @returns Paginated results v·ªõi relevant data
   */
  async searchParticipations(
    queryBuilder: VaccinationParticipationQueryBuilder
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    // üöÄ PERFORMANCE OPTIMIZATION: Smart routing d·ª±a tr√™n keyword presence
    if (queryBuilder.getKeyword()) {
      // Strategy 1: Aggregation Pipeline cho keyword search
      // - Pros: C√≥ th·ªÉ search trong related collections (campaign, student, user)
      // - Cons: Ph·ª©c t·∫°p h∆°n, t·ªën resources h∆°n
      return this.searchWithAggregationPipeline(queryBuilder);
    }

    // Strategy 2: Simple MongoDB Query cho basic filtering
    // - Pros: Performance cao, s·ª≠ d·ª•ng indexes efficiently
    // - Cons: Ch·ªâ search trong current collection
    return this.searchWithSimpleFilter(queryBuilder);
  }

  /**
   * üîß SIMPLE FILTER SEARCH - High Performance Strategy
   * 
   * Ch·ª©c nƒÉng: Search v·ªõi MongoDB query ƒë∆°n gi·∫£n, t·ªëi ∆∞u cho performance
   * 
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes: (campaign + parentConsent), (campaign + vaccinationStatus)
   * - Populate ch·ªâ select fields c·∫ßn thi·∫øt ƒë·ªÉ gi·∫£m data transfer
   * - Sort theo createdAt index
   * 
   * @param queryBuilder - Query parameters kh√¥ng c√≥ keyword
   * @returns Paginated results v·ªõi populated data
   */
  private async searchWithSimpleFilter(
    queryBuilder: VaccinationParticipationQueryBuilder
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    // Build filter t·ª´ query parameters (kh√¥ng c√≥ keyword matching)
    const filter = queryBuilder.buildFilter();

    // üìä PARALLEL EXECUTION: Ch·∫°y ƒë·ªìng th·ªùi query + count ƒë·ªÉ t·ªëi ∆∞u response time
    const [records, total] = await Promise.all([
      // Main query v·ªõi optimized indexes v√† selective population
      this.model.find(filter)
        // üîó SELECTIVE POPULATE: Ch·ªâ l·∫•y fields c·∫ßn thi·∫øt, ·∫©n sensitive data
        .populate('campaign', 'vaccineName vaccineType startDate status') // Campaign basics
        .populate('student', 'name studentCode') // Student basics
        .populate('createdBy', 'name email') // Creator info (NO password)
        .populate('vaccinatedNurse', 'name email') // Nurse info (NO password)
        // üìÑ PAGINATION: Skip v√† limit cho ph√¢n trang
        .skip(queryBuilder.getSkip())
        .limit(queryBuilder.getLimit())
        // üìà SORTING: S·ª≠ d·ª•ng index ƒë·ªÉ sort efficiently
        .sort(queryBuilder.getSort())
        .exec(),

      // Count query ƒë·ªÉ t√≠nh total pages
      this.model.countDocuments(filter).exec()
    ]);

    return {
      records,
      total,
      page: queryBuilder.getPage(),
      limit: queryBuilder.getLimit(),
      totalPages: Math.ceil(total / queryBuilder.getLimit())
    };
  }

  /**
   * üîç AGGREGATION PIPELINE SEARCH - Advanced Multi-Collection Search
   * 
   * Ch·ª©c nƒÉng: Search v·ªõi keyword across multiple related collections
   * 
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng $lookup ƒë·ªÉ join v·ªõi related collections
   * - $match s·ªõm ƒë·ªÉ gi·∫£m data c·∫ßn process
   * - Text search indexes cho keyword matching
   * - Projection ƒë·ªÉ ch·ªâ tr·∫£ v·ªÅ fields c·∫ßn thi·∫øt
   * 
   * Pipeline stages:
   * 1. $lookup: Join v·ªõi campaigns, students, users
   * 2. $match: Filter theo basic criteria + keyword matching
   * 3. $project: Format output v√† hide sensitive fields
   * 4. $sort: Sort theo relevance + user criteria
   * 5. $skip/$limit: Pagination
   * 
   * @param queryBuilder - Query parameters c√≥ keyword
   * @returns Paginated results v·ªõi joined data
   */
  private async searchWithAggregationPipeline(
    queryBuilder: VaccinationParticipationQueryBuilder): Promise<PaginationResult<IVaccinationParticipation>> {
    // Build filter conditions (kh√¥ng bao g·ªìm keyword matching)
    const filter = queryBuilder.buildFilter();
    // Build keyword matching conditions cho aggregation
    const keywordMatch = queryBuilder.buildKeywordMatch();

    // üîÑ AGGREGATION PIPELINE: Multi-stage processing cho complex search
    const pipeline = [
      // üîó STAGE 1: JOIN WITH CAMPAIGNS
      // M·ª•c ƒë√≠ch: L·∫•y th√¥ng tin campaign ƒë·ªÉ search trong vaccineName, vaccineType, etc.
      {
        $lookup: {
          from: 'vaccinationcampaigns', // Collection name trong MongoDB
          localField: 'campaign', // Field trong VaccinationParticipation
          foreignField: '_id', // Field trong VaccinationCampaign
          as: 'campaignInfo' // Alias cho joined data
        }
      },
      // üîó STAGE 2: JOIN WITH STUDENTS/CHILDREN
      // M·ª•c ƒë√≠ch: L·∫•y th√¥ng tin student ƒë·ªÉ search trong name, studentCode
      {
        $lookup: {
          from: 'children', // Children collection
          localField: 'student',
          foreignField: '_id',
          as: 'studentInfo'
        }
      },
      // üîó STAGE 3: JOIN WITH CREATOR INFO
      // M·ª•c ƒë√≠ch: L·∫•y th√¥ng tin user t·∫°o record ƒë·ªÉ search trong name, email
      {
        $lookup: {
          from: 'users',
          localField: 'createdBy',
          foreignField: '_id',
          as: 'createdByInfo'
        }
      },
      // üîó STAGE 4: JOIN WITH NURSE INFO
      // M·ª•c ƒë√≠ch: L·∫•y th√¥ng tin nurse ƒë·ªÉ search trong name, email
      {
        $lookup: {
          from: 'users',
          localField: 'vaccinatedNurse',
          foreignField: '_id',
          as: 'nurseInfo'
        }
      },
      // üéØ STAGE 5: FILTERING
      // M·ª•c ƒë√≠ch: Apply t·∫•t c·∫£ filter conditions + keyword matching
      {
        $match: {
          ...filter, // Basic filters (campaign, student, status, date ranges)
          ...keywordMatch // Keyword search across joined collections
        }
      },
      // üîí STAGE 6: PROJECTION & SECURITY
      // M·ª•c ƒë√≠ch: Format output v√† hide sensitive information (passwords)
      {
        $project: {
          _id: 1,
          // Campaign info (first element from array)
          campaign: { $arrayElemAt: ['$campaignInfo', 0] },
          // Student info
          student: { $arrayElemAt: ['$studentInfo', 0] },
          // Participation fields
          parentConsent: 1,
          parentConsentDate: 1,
          parentNote: 1,
          vaccinationStatus: 1,
          vaccinationDate: 1,
          nurseNote: 1,
          createdAt: 1,
          updatedAt: 1,
          // üîí SECURE USER INFO: Ch·ªâ expose safe fields
          vaccinatedNurse: {
            _id: { $arrayElemAt: ['$nurseInfo._id', 0] },
            name: { $arrayElemAt: ['$nurseInfo.name', 0] },
            email: { $arrayElemAt: ['$nurseInfo.email', 0] }
            // ‚ùå Password v√† sensitive fields ƒë∆∞·ª£c ·∫©n
          },
          createdBy: {
            _id: { $arrayElemAt: ['$createdByInfo._id', 0] },
            name: { $arrayElemAt: ['$createdByInfo.name', 0] },
            email: { $arrayElemAt: ['$createdByInfo.email', 0] }
            // ‚ùå Password v√† sensitive fields ƒë∆∞·ª£c ·∫©n
          }
        }
      }
    ];

    // üìä PARALLEL EXECUTION: Ch·∫°y ƒë·ªìng th·ªùi data query + count query
    const [records, totalResult] = await Promise.all([
      // Main aggregation v·ªõi pagination v√† sorting 
      VaccinationParticipation.aggregate([
        ...pipeline,
        // üìà SORTING: Sort theo user criteria        // üìà SORTING: Sort theo user criteria
        { $sort: queryBuilder.getSort() },
        // üìÑ PAGINATION: Skip v√† limit
        { $skip: queryBuilder.getSkip() },
        { $limit: queryBuilder.getLimit() }
      ]).exec(),

      // Count aggregation ƒë·ªÉ t√≠nh total records
      VaccinationParticipation.aggregate([
        ...pipeline,
        { $count: "total" } // ƒê·∫øm s·ªë documents sau khi filter
      ]).exec()
    ]);

    const total = totalResult[0]?.total || 0;

    return {
      records,
      total,
      page: queryBuilder.getPage(),
      limit: queryBuilder.getLimit(),
      totalPages: Math.ceil(total / queryBuilder.getLimit())
    };
  }

  /**
  * üë®‚Äçüë©‚Äçüëß‚Äçüë¶ PARENT SEARCH - Scoped Search for Parent's Children Only
  * 
  * Ch·ª©c nƒÉng: Ph·ª• huynh search vaccination records c·ªßa con em m√¨nh
  * 
  * Security:
  * - Ch·ªâ search trong children c·ªßa parent ƒë√≥ (userId matching)
  * - Kh√¥ng th·ªÉ access data c·ªßa children kh√°c
  * - Same optimization strategies nh∆∞ general search
  * 
  * T·ªëi ∆∞u h√≥a:
  * - S·ª≠ d·ª•ng aggregation pipeline v·ªõi early filtering
  * - Student lookup v·ªõi userId matching ngay t·ª´ ƒë·∫ßu
  * - Index optimization: student + userId composite index
  * 
  * @param parentId - ID c·ªßa parent user
  * @param queryBuilder - Query parameters (c√≥ th·ªÉ c√≥ keyword)
  * @returns Paginated results ch·ªâ c·ªßa children thu·ªôc parent
  */
  async searchParticipationsByParent(
    parentId: string,
    queryBuilder: VaccinationParticipationQueryBuilder
  ): Promise<PaginationResult<IVaccinationParticipation>> {
    const filter = queryBuilder.buildFilter();
    const keywordMatch = queryBuilder.buildKeywordMatch();

    const pipeline = [
      {
        $lookup: {
          from: 'children',
          localField: 'student',
          foreignField: '_id',
          as: 'studentInfo'
        }
      },
      {
        $lookup: {
          from: 'vaccinationcampaigns',
          localField: 'campaign',
          foreignField: '_id',
          as: 'campaignInfo'
        }
      },
      {
        $lookup: {
          from: 'users',
          localField: 'vaccinatedNurse',
          foreignField: '_id',
          as: 'nurseInfo'
        }
      },
      {
        $lookup: {
          from: 'users',
          localField: 'createdBy',
          foreignField: '_id',
          as: 'createdByInfo'
        }
      },
      {
        $match: {
          'studentInfo.userId': new Types.ObjectId(parentId),
          ...filter,
          // Ch·ªâ apply keyword match n·∫øu c√≥ keyword
          ...(queryBuilder.getKeyword() ? keywordMatch : {})
        }
      },      // Project ƒë·ªÉ tr·∫£ v·ªÅ ƒë√∫ng format v√† ·∫©n password
      {
        $project: {
          _id: 1,
          campaign: { $arrayElemAt: ['$campaignInfo', 0] },
          student: { $arrayElemAt: ['$studentInfo', 0] },
          parentConsent: 1,
          parentConsentDate: 1,
          parentNote: 1,
          vaccinationStatus: 1,
          vaccinationDate: 1,
          vaccinatedNurse: {
            _id: { $arrayElemAt: ['$nurseInfo._id', 0] },
            name: { $arrayElemAt: ['$nurseInfo.name', 0] },
            email: { $arrayElemAt: ['$nurseInfo.email', 0] }
            // ·∫®n password
          },
          nurseNote: 1,
          createdBy: {
            _id: { $arrayElemAt: ['$createdByInfo._id', 0] },
            name: { $arrayElemAt: ['$createdByInfo.name', 0] },
            email: { $arrayElemAt: ['$createdByInfo.email', 0] }
            // ·∫®n password
          },
          createdAt: 1,
          updatedAt: 1
        }
      }
    ];

    const [records, totalResult] = await Promise.all([
      VaccinationParticipation.aggregate([
        ...pipeline,
        { $skip: queryBuilder.getSkip() },
        { $limit: queryBuilder.getLimit() },
        { $sort: queryBuilder.getSort() }
      ]).exec(),

      VaccinationParticipation.aggregate([
        ...pipeline,
        { $count: "total" }
      ]).exec()
    ]);

    const total = totalResult[0]?.total || 0;

    return {
      records,
      total,
      page: queryBuilder.getPage(),
      limit: queryBuilder.getLimit(),
      totalPages: Math.ceil(total / queryBuilder.getLimit())
    };
  }
}
