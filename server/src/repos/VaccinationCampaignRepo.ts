import { BaseRepository } from "@src/common/base/base.repository";
import { FilterOptions, PaginationOptions, PaginationResult, SortOptions } from "@src/common/interfaces/mongo.interface";
import { Role } from "@src/models/Role";
import { User } from "@src/models/User";
import { VaccinationCampaign, IVaccinationCampaign } from "@src/models/VaccinationCampaign";
import { VaccinationCampaignQueryBuilder } from "@src/payload/request/filter/vaccination.request";
import { Types } from "mongoose";

export class VaccinationCampaignRepository extends BaseRepository<IVaccinationCampaign> {
  constructor() {
    super(VaccinationCampaign);
  }
  /**
   * Get campaigns with role-based filtering
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch chi·∫øn d·ªãch ti√™m ch·ªßng v·ªõi ph√¢n quy·ªÅn
   * - Admin c√≥ th·ªÉ xem t·∫•t c·∫£ chi·∫øn d·ªãch
   * - Nurse ch·ªâ xem c√°c chi·∫øn d·ªãch c√≥ tr·∫°ng th√°i "planned" ho·∫∑c "ongoing
   * @param role - Role c·ªßa ng∆∞·ªùi d√πng (nurse ho·∫∑c admin)
   * @param userId - ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (ƒë·ªÉ ki·ªÉm tra quy·ªÅn)
   * @param options - Pagination options (page, limit)  
   * @param sort - Sort options (n·∫øu c√≥)
   * @returns Paginated result v·ªõi danh s√°ch chi·∫øn d·ªãch
   * Security:
   * - Ch·ªâ expose c√°c tr∆∞·ªùng c·∫ßn thi·∫øt (·∫©n password)
   * - Role-based access control: Nurse ch·ªâ xem c√°c chi·∫øn d·ªãch ph√π h·ª£p v·ªõi quy·ªÅn c·ªßa h·ªç
   * * Performance:
   * - S·ª≠ d·ª•ng compound indexes ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n  
   */
  async getCampaignsWithRoleFilter(
    role: string,
    userId: string,
    options: PaginationOptions,
    sort?: SortOptions
  ): Promise<PaginationResult<IVaccinationCampaign>> {
    let filter: FilterOptions<IVaccinationCampaign> = {};

    const user = await User.findById(userId).exec() as any;
    const validRole = await Role.findOne({ name: role }).exec() as any;

    if (role === "nurse" && user?.roleId === validRole._id.toString()) {
      // Nurse ch·ªâ xem campaigns planned v√† ongoing
      filter.status = { $in: ["planned", "ongoing"] };
    }
    // Admin xem t·∫•t c·∫£ (kh√¥ng filter g√¨ th√™m)

    const { page = 1, limit = 10 } = options;
    const skip = (page - 1) * limit;

    const [records, total] = await Promise.all([
      this.model
        .find(filter)
        .populate('createdBy', 'name email') // ·∫®n password
        .sort(sort || { createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .exec(),
      this.model.countDocuments(filter).exec(),
    ]);

    return {
      records,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    };
  }

  /**
   * Get campaign by ID with role-based access
   * Ch·ª©c nƒÉng: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt chi·∫øn d·ªãch ti√™m ch·ªßng theo ID
   * - Admin c√≥ th·ªÉ xem t·∫•t c·∫£ chi·∫øn d·ªãch
   * - Nurse ch·ªâ xem c√°c chi·∫øn d·ªãch c√≥ tr·∫°ng th√°i "planned" ho·∫∑c "ongoing"
   * @param campaignId - ID c·ªßa chi·∫øn d·ªãch c·∫ßn l·∫•y
   * @param role - Role c·ªßa ng∆∞·ªùi d√πng (nurse ho·∫∑c admin)
   * @param userId - ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (ƒë·ªÉ ki·ªÉm tra quy·ªÅn
   * @return IVaccinationCampaign | null - Tr·∫£ v·ªÅ chi·∫øn d·ªãch n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i null
   * Security:
   * - Ch·ªâ expose c√°c tr∆∞·ªùng c·∫ßn thi·∫øt (·∫©n password)
   * - Role-based access control: Nurse ch·ªâ xem c√°c chi·∫øn d·ªãch ph√π h·ª£p v·ªõi quy·ªÅn c·ªßa h·ªç
   * Performance:
   * - S·ª≠ d·ª•ng compound indexes ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
   * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
   */
  async getCampaignByIdWithRoleFilter(
    campaignId: string,
    role: string,
    userId: string
  ): Promise<IVaccinationCampaign | null> {
    let filter: FilterOptions<IVaccinationCampaign> = {
      _id: new Types.ObjectId(campaignId)
    };
    const user = await User.findById(userId).exec() as any;
    const validRole = await Role.findOne({ name: role }).exec() as any;

    if (role === "nurse" && user?.roleId === validRole._id.toString()) {
      // Nurse ch·ªâ xem campaigns planned v√† ongoing
      filter.status = { $in: ["planned", "ongoing"] };
    }

    return this.model.findOne(filter)
      .populate('createdBy', 'name email') // ·∫®n password
      .exec();
  }

  /**
   * Update campaign (ch·ªâ admin ƒë∆∞·ª£c ph√©p)
   * Ch·ª©c nƒÉng: C·∫≠p nh·∫≠t th√¥ng tin chi·∫øn d·ªãch ti√™m ch·ªßng
   * - Ch·ªâ admin t·∫°o m·ªõi c√≥ th·ªÉ s·ª≠a chi·∫øn d·ªãch
   * @param campaignId - ID c·ªßa chi·∫øn d·ªãch c·∫ßn c·∫≠p nh·∫≠t
   * @param updateData - D·ªØ li·ªáu c·∫≠p nh·∫≠t (partial)
   * @param adminId - ID c·ªßa admin th·ª±c hi·ªán c·∫≠p nh·∫≠t
   * @returns IVaccinationCampaign | null - Tr·∫£ v·ªÅ chi·∫øn d·ªãch ƒë√£ c·∫≠p nh·∫≠t
   * Security:
   * - Ch·ªâ admin t·∫°o m·ªõi c√≥ th·ªÉ s·ª≠a chi·∫øn d·ªãch
   * Performance:
   * - S·ª≠ d·ª•ng compound indexes ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
   */
  async updateCampaign(
    campaignId: string,
    updateData: Partial<IVaccinationCampaign>,
    adminId: string
  ): Promise<IVaccinationCampaign | null> {
    // Ki·ªÉm tra quy·ªÅn: ch·ªâ admin t·∫°o m·ªõi c√≥ th·ªÉ s·ª≠a
    const campaign = await this.findById(campaignId);
    if (!campaign) {
      throw new Error("Campaign not found");
    }

    if (campaign.createdBy.toString() !== adminId) {
      throw new Error("Only the creator can update this campaign");
    }

    return this.update(campaignId, updateData);
  }
  /**
   * Get campaigns by status
   * Ch·ª©c nƒÉng: L·∫•y danh s√°ch chi·∫øn d·ªãch theo tr·∫°ng th√°i
   * - D√πng ƒë·ªÉ l·ªçc c√°c chi·∫øn d·ªãch theo tr·∫°ng th√°i c·ª• th·ªÉ (planned, ongoing, completed, cancelled)
   * @param status - M·∫£ng c√°c tr·∫°ng th√°i c·∫ßn l·ªçc
   * @param options - Pagination options (page, limit)
   * @param sort - Sort options (n·∫øu c√≥)  
   * @returns PaginationResult<IVaccinationCampaign> - Tr·∫£ v·ªÅ danh s√°ch chi·∫øn d·ªãch theo tr·∫°ng th√°i
   * Security:
   * - Ch·ªâ expose c√°c tr∆∞·ªùng c·∫ßn thi·∫øt (·∫©n password)
   * Performance:
   * - S·ª≠ d·ª•ng compound indexes ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
   * - S·ª≠ d·ª•ng skip v√† limit ƒë·ªÉ ph√¢n trang hi·ªáu qu·∫£
   */
  async getCampaignsByStatus(
    status: string[],
    options: PaginationOptions,
    sort?: SortOptions
  ): Promise<PaginationResult<IVaccinationCampaign>> {
    const filter: FilterOptions<IVaccinationCampaign> = {
      status: { $in: status }
    };

    const { page = 1, limit = 10 } = options;
    const skip = (page - 1) * limit;

    const [records, total] = await Promise.all([
      this.model
        .find(filter)
        .populate('createdBy', 'name email') // ·∫®n password
        .sort(sort || { createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .exec(),
      this.model.countDocuments(filter).exec(),
    ]);

    return {
      records,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    };
  }

  /**
   * üîç MAIN SEARCH METHOD - Smart Query Routing with Role-Based Access
   * 
   * Ch·ª©c nƒÉng: Entry point cho campaign search v·ªõi role-based security
   * 
   * T·ªëi ∆∞u h√≥a:
   * - Strategy pattern: Ch·ªçn method ph√π h·ª£p d·ª±a tr√™n keyword presence
   * - Role-based filtering: Nurse ch·ªâ xem planned/ongoing campaigns
   * - Index optimization: S·ª≠ d·ª•ng compound indexes ƒë·ªÉ tƒÉng performance
   * 
   * Security:
   * - Role-based access control (nurse vs admin)
   * - Populate ch·ªâ safe fields, ·∫©n password
   * 
   * @param role - User role ('nurse' ho·∫∑c 'admin')
   * @param userId - ID c·ªßa user hi·ªán t·∫°i
   * @param queryBuilder - Object ch·ª©a search parameters
   * @returns Paginated campaign results
   * @throws Error n·∫øu kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
   */
  async searchCampaigns(
    role: string,
    userId: string,
    queryBuilder: VaccinationCampaignQueryBuilder
  ): Promise<PaginationResult<IVaccinationCampaign>> {
    // üöÄ PERFORMANCE OPTIMIZATION: Smart routing d·ª±a tr√™n keyword presence
    if (queryBuilder.getKeyword()) {
      // Strategy 1: Aggregation Pipeline cho keyword search
      // - Pros: C√≥ th·ªÉ search trong related collections (users)
      // - Cons: Ph·ª©c t·∫°p h∆°n, t·ªën resources h∆°n
      return this.searchCampaignsWithKeyword(role, userId, queryBuilder);
    }

    // Strategy 2: Simple MongoDB Query cho basic filtering
    // - Pros: Performance cao, s·ª≠ d·ª•ng indexes efficiently
    // - Cons: Ch·ªâ search trong current collection
    return this.searchCampaignsWithSimpleFilter(role, userId, queryBuilder);
  }

  /**
   * üîß SIMPLE FILTER SEARCH - High Performance Strategy
   * 
   * Ch·ª©c nƒÉng: Search campaigns v·ªõi MongoDB query ƒë∆°n gi·∫£n
   * 
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng compound indexes: (status + createdAt), (startDate + status)
   * - Role-based early filtering ƒë·ªÉ gi·∫£m data scan
   * - Populate selective ƒë·ªÉ gi·∫£m data transfer
   * 
   * @param role - User role
   * @param userId - User ID
   * @param queryBuilder - Query parameters kh√¥ng c√≥ keyword
   * @returns Paginated results
   */
  private async searchCampaignsWithSimpleFilter(
    role: string,
    userId: string,
    queryBuilder: VaccinationCampaignQueryBuilder
  ): Promise<PaginationResult<IVaccinationCampaign>> {
    // Build filter t·ª´ query parameters
    let filter = queryBuilder.buildFilter();
    const user = await User.findById(userId).exec() as any;
    const validRole = await Role.findOne({ name: role }).exec() as any;

    if (role === "nurse" && user?.roleId === validRole._id.toString()) {
      // Nurse ch·ªâ xem campaigns planned v√† ongoing
      if (filter.status) {
        // N·∫øu ƒë√£ c√≥ filter status, validate v·ªõi nurse permissions
        const allowedStatuses = ["planned", "ongoing"];
        if (!allowedStatuses.includes(filter.status as string)) {
          // Status kh√¥ng ƒë∆∞·ª£c ph√©p, return empty result
          return {
            records: [],
            total: 0,
            page: queryBuilder.getPage(),
            limit: queryBuilder.getLimit(),
            totalPages: 0
          };
        }
      } else {
        // Kh√¥ng c√≥ filter status, th√™m nurse restriction
        filter.status = { $in: ["planned", "ongoing"] };
      }
    }
    // Admin kh√¥ng c√≥ restriction g√¨

    // üìä PARALLEL EXECUTION: Ch·∫°y ƒë·ªìng th·ªùi query + count ƒë·ªÉ t·ªëi ∆∞u response time
    const [records, total] = await Promise.all([
      // Main query v·ªõi optimized indexes v√† selective population
      this.model.find(filter)
        // üîó SELECTIVE POPULATE: Ch·ªâ l·∫•y fields c·∫ßn thi·∫øt, ·∫©n sensitive data
        .populate('createdBy', 'name email') // Creator info (NO password)
        // üìÑ PAGINATION: Skip v√† limit cho ph√¢n trang
        .skip(queryBuilder.getSkip())
        .limit(queryBuilder.getLimit())
        // üìà SORTING: S·ª≠ d·ª•ng index ƒë·ªÉ sort efficiently
        .sort(queryBuilder.getSort())
        .exec(),

      // Count query ƒë·ªÉ t√≠nh total pages
      this.model.countDocuments(filter).exec()
    ]);

    return {
      records,
      total,
      page: queryBuilder.getPage(),
      limit: queryBuilder.getLimit(),
      totalPages: Math.ceil(total / queryBuilder.getLimit())
    };
  }

  /**
   * üîç AGGREGATION PIPELINE SEARCH - Advanced Multi-Collection Search
   * 
   * Ch·ª©c nƒÉng: Search campaigns v·ªõi keyword across multiple fields v√† related collections
   * 
   * T·ªëi ∆∞u h√≥a:
   * - S·ª≠ d·ª•ng $lookup ƒë·ªÉ join v·ªõi users collection (creators)
   * - $addFields ƒë·ªÉ t√≠nh relevance score d·ª±a tr√™n keyword matching
   * - Early filtering v·ªõi role-based access control
   * - Projection ƒë·ªÉ hide sensitive fields v√† t·ªëi ∆∞u data transfer
   * 
   * Scoring Algorithm:
   * - Campaign fields match (vaccineName, vaccineType, targetAudience): 10 points
   * - Creator info match (name, email): 5 points
   * - Sort by total score desc, sau ƒë√≥ theo user criteria
   * 
   * Pipeline stages:
   * 1. $lookup: Join v·ªõi users collection ƒë·ªÉ l·∫•y creator info
   * 2. $match: Filter theo basic criteria + role-based access
   * 3. $addFields: T√≠nh relevance scores cho keyword matching
   * 4. $match: L·ªçc ch·ªâ nh·ªØng records c√≥ score > 0
   * 5. $addFields: T√≠nh totalScore ƒë·ªÉ sort
   * 6. $project: Format output v√† hide sensitive fields
   * 7. $sort: Sort theo relevance + user criteria
   * 8. $skip/$limit: Pagination
   * 
   * @param role - User role for access control
   * @param userId - User ID (for future extensions)
   * @param queryBuilder - Query parameters c√≥ keyword
   * @returns Paginated results v·ªõi relevance scoring
   */
  private async searchCampaignsWithKeyword(
    role: string,
    userId: string,
    queryBuilder: VaccinationCampaignQueryBuilder
  ): Promise<PaginationResult<IVaccinationCampaign>> {
    // Build filter conditions t·ª´ query parameters
    const filter = queryBuilder.buildFilter();
    const keyword = queryBuilder.getKeyword()!; // Keyword ch·∫Øc ch·∫Øn c√≥ v√¨ ƒë√£ check ·ªü ƒë·∫ßu method
    const user = await User.findById(userId).exec() as any;
    const validRole = await Role.findOne({ name: role }).exec() as any;

    if (role === "nurse" && user?.roleId === validRole._id.toString()) {
      filter.status = { $in: ["planned", "ongoing"] };
    }

    // üîÑ AGGREGATION PIPELINE: Multi-stage processing cho complex search
    const pipeline = [
      // üîó STAGE 1: JOIN WITH USERS COLLECTION
      // M·ª•c ƒë√≠ch: L·∫•y th√¥ng tin creator ƒë·ªÉ search trong name, email
      {
        $lookup: {
          from: 'users', // Collection name trong MongoDB
          localField: 'createdBy', // Field trong VaccinationCampaign
          foreignField: '_id', // Field trong Users
          as: 'createdByInfo' // Alias cho joined data
        }
      },

      // üéØ STAGE 2: BASIC FILTERING
      // M·ª•c ƒë√≠ch: Apply basic filters (status, dates, etc.) tr∆∞·ªõc khi text search
      // Optimization: Filter s·ªõm ƒë·ªÉ gi·∫£m data c·∫ßn process
      {
        $match: filter
      },

      // üî¢ STAGE 3: RELEVANCE SCORING
      // M·ª•c ƒë√≠ch: T√≠nh ƒëi·ªÉm relevance d·ª±a tr√™n keyword matching
      {
        $addFields: {
          // üìù CAMPAIGN TEXT SCORE: Search trong vaccine name, type, target audience
          textScore: {
            $cond: {
              if: {
                $regexMatch: {
                  input: { $concat: ['$vaccineName', ' ', '$vaccineType', ' ', '$targetAudience'] },
                  regex: keyword,
                  options: 'i' // Case-insensitive
                }
              },
              then: 10, // ƒêi·ªÉm cao cho campaign fields
              else: 0
            }
          },
          // üë§ CREATOR SCORE: Search trong creator name v√† email
          creatorScore: {
            $cond: {
              if: {
                $or: [
                  { $regexMatch: { input: { $arrayElemAt: ['$createdByInfo.name', 0] }, regex: keyword, options: 'i' } },
                  { $regexMatch: { input: { $arrayElemAt: ['$createdByInfo.email', 0] }, regex: keyword, options: 'i' } }
                ]
              },
              then: 5, // ƒêi·ªÉm th·∫•p h∆°n cho creator fields
              else: 0
            }
          }
        }
      },

      // üéØ STAGE 4: RELEVANCE FILTERING
      // M·ª•c ƒë√≠ch: Ch·ªâ gi·ªØ l·∫°i nh·ªØng records c√≥ keyword match (score > 0)
      {
        $match: {
          $expr: { $gt: [{ $add: ['$textScore', '$creatorScore'] }, 0] }
        }
      },

      // üî¢ STAGE 5: TOTAL SCORE CALCULATION
      // M·ª•c ƒë√≠ch: T√≠nh t·ªïng ƒëi·ªÉm ƒë·ªÉ sort theo relevance
      {
        $addFields: {
          totalScore: { $add: ['$textScore', '$creatorScore'] }
        }
      },

      // üîí STAGE 6: PROJECTION & SECURITY
      // M·ª•c ƒë√≠ch: Format output v√† hide sensitive information (passwords)
      {
        $project: {
          _id: 1,
          vaccineName: 1,
          vaccineType: 1,
          targetAudience: 1,
          startDate: 1,
          status: 1,
          // üîí SECURE USER INFO: Ch·ªâ expose safe fields
          createdBy: {
            _id: { $arrayElemAt: ['$createdByInfo._id', 0] },
            name: { $arrayElemAt: ['$createdByInfo.name', 0] },
            email: { $arrayElemAt: ['$createdByInfo.email', 0] }
            // ‚ùå Password v√† sensitive fields ƒë∆∞·ª£c ·∫©n
          },
          createdAt: 1,
          updatedAt: 1,
          totalScore: 1 // Gi·ªØ score ƒë·ªÉ sort
        }
      }
    ];

    // üìä PARALLEL EXECUTION: Ch·∫°y ƒë·ªìng th·ªùi data query + count query
    const [records, totalResult] = await Promise.all([
      // Main aggregation v·ªõi sorting v√† pagination
      VaccinationCampaign.aggregate([
        ...pipeline,
        // üìà SORTING: Sort theo relevance score tr∆∞·ªõc, sau ƒë√≥ theo user criteria
        { $sort: { totalScore: -1, ...queryBuilder.getSort() } },
        // üìÑ PAGINATION: Skip v√† limit
        { $skip: queryBuilder.getSkip() },
        { $limit: queryBuilder.getLimit() }
      ]).exec(),

      // Count aggregation ƒë·ªÉ t√≠nh total records
      VaccinationCampaign.aggregate([
        ...pipeline,
        { $count: "total" } // ƒê·∫øm s·ªë documents sau khi filter
      ]).exec()
    ]);

    const total = totalResult[0]?.total || 0;

    return {
      records,
      total,
      page: queryBuilder.getPage(),
      limit: queryBuilder.getLimit(),
      totalPages: Math.ceil(total / queryBuilder.getLimit())
    };
  }
}
